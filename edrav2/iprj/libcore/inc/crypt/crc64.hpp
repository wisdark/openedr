//
// edrav2.libcore project
// 
// Author: Denis Kroshin (28.01.2019)
// Reviewer: Denis Bogdanov (04.02.2019)
//
///
/// @file CRC64 implementation
///
#pragma once

namespace cmd {
namespace crypt {
namespace crc64 {
namespace detail {

// Technical description
// URL: http://andrewl.dreamhosters.com/filedump/crc64.cpp

constexpr size_t c_nBlockLen = 1;
constexpr size_t c_nHashLen = 8;

typedef uint64_t Hash;


struct Context
{
	uint64_t digest;
};

static const uint64_t g_nInitValue = uint32_t(-1); // Must be 0 or -1

inline const uint64_t* getTable()
{
	// CRC-64-ECMA-182
	static const uint64_t Table[0x100] =
	{
		0x0000000000000000UI64, 0xB32E4CBE03A75F6FUI64, 0xF4843657A840A05BUI64, 0x47AA7AE9ABE7FF34UI64,
		0x7BD0C384FF8F5E33UI64, 0xC8FE8F3AFC28015CUI64, 0x8F54F5D357CFFE68UI64, 0x3C7AB96D5468A107UI64,
		0xF7A18709FF1EBC66UI64, 0x448FCBB7FCB9E309UI64, 0x0325B15E575E1C3DUI64, 0xB00BFDE054F94352UI64,
		0x8C71448D0091E255UI64, 0x3F5F08330336BD3AUI64, 0x78F572DAA8D1420EUI64, 0xCBDB3E64AB761D61UI64,
		0x7D9BA13851336649UI64, 0xCEB5ED8652943926UI64, 0x891F976FF973C612UI64, 0x3A31DBD1FAD4997DUI64,
		0x064B62BCAEBC387AUI64, 0xB5652E02AD1B6715UI64, 0xF2CF54EB06FC9821UI64, 0x41E11855055BC74EUI64,
		0x8A3A2631AE2DDA2FUI64, 0x39146A8FAD8A8540UI64, 0x7EBE1066066D7A74UI64, 0xCD905CD805CA251BUI64,
		0xF1EAE5B551A2841CUI64, 0x42C4A90B5205DB73UI64, 0x056ED3E2F9E22447UI64, 0xB6409F5CFA457B28UI64,
		0xFB374270A266CC92UI64, 0x48190ECEA1C193FDUI64, 0x0FB374270A266CC9UI64, 0xBC9D3899098133A6UI64,
		0x80E781F45DE992A1UI64, 0x33C9CD4A5E4ECDCEUI64, 0x7463B7A3F5A932FAUI64, 0xC74DFB1DF60E6D95UI64,
		0x0C96C5795D7870F4UI64, 0xBFB889C75EDF2F9BUI64, 0xF812F32EF538D0AFUI64, 0x4B3CBF90F69F8FC0UI64,
		0x774606FDA2F72EC7UI64, 0xC4684A43A15071A8UI64, 0x83C230AA0AB78E9CUI64, 0x30EC7C140910D1F3UI64,
		0x86ACE348F355AADBUI64, 0x3582AFF6F0F2F5B4UI64, 0x7228D51F5B150A80UI64, 0xC10699A158B255EFUI64,
		0xFD7C20CC0CDAF4E8UI64, 0x4E526C720F7DAB87UI64, 0x09F8169BA49A54B3UI64, 0xBAD65A25A73D0BDCUI64,
		0x710D64410C4B16BDUI64, 0xC22328FF0FEC49D2UI64, 0x85895216A40BB6E6UI64, 0x36A71EA8A7ACE989UI64,
		0x0ADDA7C5F3C4488EUI64, 0xB9F3EB7BF06317E1UI64, 0xFE5991925B84E8D5UI64, 0x4D77DD2C5823B7BAUI64,
		0x64B62BCAEBC387A1UI64, 0xD7986774E864D8CEUI64, 0x90321D9D438327FAUI64, 0x231C512340247895UI64,
		0x1F66E84E144CD992UI64, 0xAC48A4F017EB86FDUI64, 0xEBE2DE19BC0C79C9UI64, 0x58CC92A7BFAB26A6UI64,
		0x9317ACC314DD3BC7UI64, 0x2039E07D177A64A8UI64, 0x67939A94BC9D9B9CUI64, 0xD4BDD62ABF3AC4F3UI64,
		0xE8C76F47EB5265F4UI64, 0x5BE923F9E8F53A9BUI64, 0x1C4359104312C5AFUI64, 0xAF6D15AE40B59AC0UI64,
		0x192D8AF2BAF0E1E8UI64, 0xAA03C64CB957BE87UI64, 0xEDA9BCA512B041B3UI64, 0x5E87F01B11171EDCUI64,
		0x62FD4976457FBFDBUI64, 0xD1D305C846D8E0B4UI64, 0x96797F21ED3F1F80UI64, 0x2557339FEE9840EFUI64,
		0xEE8C0DFB45EE5D8EUI64, 0x5DA24145464902E1UI64, 0x1A083BACEDAEFDD5UI64, 0xA9267712EE09A2BAUI64,
		0x955CCE7FBA6103BDUI64, 0x267282C1B9C65CD2UI64, 0x61D8F8281221A3E6UI64, 0xD2F6B4961186FC89UI64,
		0x9F8169BA49A54B33UI64, 0x2CAF25044A02145CUI64, 0x6B055FEDE1E5EB68UI64, 0xD82B1353E242B407UI64,
		0xE451AA3EB62A1500UI64, 0x577FE680B58D4A6FUI64, 0x10D59C691E6AB55BUI64, 0xA3FBD0D71DCDEA34UI64,
		0x6820EEB3B6BBF755UI64, 0xDB0EA20DB51CA83AUI64, 0x9CA4D8E41EFB570EUI64, 0x2F8A945A1D5C0861UI64,
		0x13F02D374934A966UI64, 0xA0DE61894A93F609UI64, 0xE7741B60E174093DUI64, 0x545A57DEE2D35652UI64,
		0xE21AC88218962D7AUI64, 0x5134843C1B317215UI64, 0x169EFED5B0D68D21UI64, 0xA5B0B26BB371D24EUI64,
		0x99CA0B06E7197349UI64, 0x2AE447B8E4BE2C26UI64, 0x6D4E3D514F59D312UI64, 0xDE6071EF4CFE8C7DUI64,
		0x15BB4F8BE788911CUI64, 0xA6950335E42FCE73UI64, 0xE13F79DC4FC83147UI64, 0x521135624C6F6E28UI64,
		0x6E6B8C0F1807CF2FUI64, 0xDD45C0B11BA09040UI64, 0x9AEFBA58B0476F74UI64, 0x29C1F6E6B3E0301BUI64,
		0xC96C5795D7870F42UI64, 0x7A421B2BD420502DUI64, 0x3DE861C27FC7AF19UI64, 0x8EC62D7C7C60F076UI64,
		0xB2BC941128085171UI64, 0x0192D8AF2BAF0E1EUI64, 0x4638A2468048F12AUI64, 0xF516EEF883EFAE45UI64,
		0x3ECDD09C2899B324UI64, 0x8DE39C222B3EEC4BUI64, 0xCA49E6CB80D9137FUI64, 0x7967AA75837E4C10UI64,
		0x451D1318D716ED17UI64, 0xF6335FA6D4B1B278UI64, 0xB199254F7F564D4CUI64, 0x02B769F17CF11223UI64,
		0xB4F7F6AD86B4690BUI64, 0x07D9BA1385133664UI64, 0x4073C0FA2EF4C950UI64, 0xF35D8C442D53963FUI64,
		0xCF273529793B3738UI64, 0x7C0979977A9C6857UI64, 0x3BA3037ED17B9763UI64, 0x888D4FC0D2DCC80CUI64,
		0x435671A479AAD56DUI64, 0xF0783D1A7A0D8A02UI64, 0xB7D247F3D1EA7536UI64, 0x04FC0B4DD24D2A59UI64,
		0x3886B22086258B5EUI64, 0x8BA8FE9E8582D431UI64, 0xCC0284772E652B05UI64, 0x7F2CC8C92DC2746AUI64,
		0x325B15E575E1C3D0UI64, 0x8175595B76469CBFUI64, 0xC6DF23B2DDA1638BUI64, 0x75F16F0CDE063CE4UI64,
		0x498BD6618A6E9DE3UI64, 0xFAA59ADF89C9C28CUI64, 0xBD0FE036222E3DB8UI64, 0x0E21AC88218962D7UI64,
		0xC5FA92EC8AFF7FB6UI64, 0x76D4DE52895820D9UI64, 0x317EA4BB22BFDFEDUI64, 0x8250E80521188082UI64,
		0xBE2A516875702185UI64, 0x0D041DD676D77EEAUI64, 0x4AAE673FDD3081DEUI64, 0xF9802B81DE97DEB1UI64,
		0x4FC0B4DD24D2A599UI64, 0xFCEEF8632775FAF6UI64, 0xBB44828A8C9205C2UI64, 0x086ACE348F355AADUI64,
		0x34107759DB5DFBAAUI64, 0x873E3BE7D8FAA4C5UI64, 0xC094410E731D5BF1UI64, 0x73BA0DB070BA049EUI64,
		0xB86133D4DBCC19FFUI64, 0x0B4F7F6AD86B4690UI64, 0x4CE50583738CB9A4UI64, 0xFFCB493D702BE6CBUI64,
		0xC3B1F050244347CCUI64, 0x709FBCEE27E418A3UI64, 0x3735C6078C03E797UI64, 0x841B8AB98FA4B8F8UI64,
		0xADDA7C5F3C4488E3UI64, 0x1EF430E13FE3D78CUI64, 0x595E4A08940428B8UI64, 0xEA7006B697A377D7UI64,
		0xD60ABFDBC3CBD6D0UI64, 0x6524F365C06C89BFUI64, 0x228E898C6B8B768BUI64, 0x91A0C532682C29E4UI64,
		0x5A7BFB56C35A3485UI64, 0xE955B7E8C0FD6BEAUI64, 0xAEFFCD016B1A94DEUI64, 0x1DD181BF68BDCBB1UI64,
		0x21AB38D23CD56AB6UI64, 0x9285746C3F7235D9UI64, 0xD52F0E859495CAEDUI64, 0x6601423B97329582UI64,
		0xD041DD676D77EEAAUI64, 0x636F91D96ED0B1C5UI64, 0x24C5EB30C5374EF1UI64, 0x97EBA78EC690119EUI64,
		0xAB911EE392F8B099UI64, 0x18BF525D915FEFF6UI64, 0x5F1528B43AB810C2UI64, 0xEC3B640A391F4FADUI64,
		0x27E05A6E926952CCUI64, 0x94CE16D091CE0DA3UI64, 0xD3646C393A29F297UI64, 0x604A2087398EADF8UI64,
		0x5C3099EA6DE60CFFUI64, 0xEF1ED5546E415390UI64, 0xA8B4AFBDC5A6ACA4UI64, 0x1B9AE303C601F3CBUI64,
		0x56ED3E2F9E224471UI64, 0xE5C372919D851B1EUI64, 0xA26908783662E42AUI64, 0x114744C635C5BB45UI64,
		0x2D3DFDAB61AD1A42UI64, 0x9E13B115620A452DUI64, 0xD9B9CBFCC9EDBA19UI64, 0x6A978742CA4AE576UI64,
		0xA14CB926613CF817UI64, 0x1262F598629BA778UI64, 0x55C88F71C97C584CUI64, 0xE6E6C3CFCADB0723UI64,
		0xDA9C7AA29EB3A624UI64, 0x69B2361C9D14F94BUI64, 0x2E184CF536F3067FUI64, 0x9D36004B35545910UI64,
		0x2B769F17CF112238UI64, 0x9858D3A9CCB67D57UI64, 0xDFF2A94067518263UI64, 0x6CDCE5FE64F6DD0CUI64,
		0x50A65C93309E7C0BUI64, 0xE388102D33392364UI64, 0xA4226AC498DEDC50UI64, 0x170C267A9B79833FUI64,
		0xDCD7181E300F9E5EUI64, 0x6FF954A033A8C131UI64, 0x28532E49984F3E05UI64, 0x9B7D62F79BE8616AUI64,
		0xA707DB9ACF80C06DUI64, 0x14299724CC279F02UI64, 0x5383EDCD67C06036UI64, 0xE0ADA17364673F59UI64
	};
	return Table;
}

//
//
//
inline uint64_t transform(const uint8_t bSymbol, uint64_t nChecksum)
{
	return getTable()[(nChecksum ^ bSymbol) & 0xFF] ^ (nChecksum >> 8);
}

//
//
//
inline void init(Context* pCtx)
{
	pCtx->digest = g_nInitValue;
}

//
//
//
inline void update(Context* pCtx, const void* pBuffer, size_t nSize)
{
	if (pBuffer == nullptr) return;
	for (size_t i = 0; i < nSize; ++i)
		pCtx->digest = transform(((const uint8_t*)pBuffer)[i], pCtx->digest);
}

//
//
//
inline void finalize(Context* pCtx, uint64_t& Digest)
{
	Digest = pCtx->digest ^ g_nInitValue;
}

//
//
//
inline Hash finalize(Context* pCtx)
{
	return pCtx->digest ^ g_nInitValue;
}

} // namespace detail 

using detail::Hash;

///
/// Hash calculator class
/// It is used with crypt::updateHash() and crypt::getHash() 
///
class Hasher
{
private:
	detail::Context m_ctx;
public:

	Hasher()
	{
		detail::init(&m_ctx);
	}

	typedef detail::Hash Hash;
	static constexpr size_t c_nBlockLen = detail::c_nBlockLen;
	static constexpr size_t c_nHashLen = detail::c_nHashLen;

	void update(const void* pBuffer, size_t nSize)
	{
		detail::update(&m_ctx, pBuffer, nSize);
	}

	detail::Hash finalize()
	{
		return detail::finalize(&m_ctx);
	}
};

constexpr size_t c_nHashLen = Hasher::c_nHashLen;
typedef Hasher::Hash Hash;

///
/// Common function for fast hash calculating 
/// Pass all params to crypt::updateHash()
/// Use crypt::updateHash() directly for more complex calculation 
///
template<class... Args>
auto getHash(Args&&... args)
{
	Hasher hasher;
	crypt::updateHash(hasher, std::forward<Args>(args)...);
	return hasher.finalize();
}


} // namespace crc64
} // namespace crypt
} // namespace cmd
